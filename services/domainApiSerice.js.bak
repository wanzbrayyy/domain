// services/domainApiService.js
const axios = require('axios');
const logger = require('../utils/logger');

const apiClient = axios.create({
    baseURL: process.env.RDASH_API_URL,
    auth: {
        username: process.env.RDASH_API_USERNAME,
        password: process.env.RDASH_API_PASSWORD
    }
});

const handleApiError = (error, functionName) => {
    const errorData = {
        message: error.message,
        responseData: error.response ? error.response.data : 'No response data',
        status: error.response ? error.response.status : 'No response status'
    };
    logger.error(`KESALAHAN API di ${functionName}`, errorData);
    throw new Error(error.response && error.response.data && error.response.data.message ? error.response.data.message : 'Terjadi kesalahan pada server API.');
};

// --- CUSTOMERS ---
const listCustomers = async () => {
    try {
        const response = await apiClient.get('/customers');
        return response.data;
    } catch (error) { handleApiError(error, 'listCustomers'); }
};

const createCustomer = async (customerData) => {
    try {
        logger.info('API SERVICE: Memulai pembuatan customer...', customerData);
        const response = await apiClient.post('/customers', customerData);
        logger.info('API SERVICE: Berhasil membuat customer. Respons diterima:', response.data);
        return response.data;
    } catch (error) { handleApiError(error, 'createCustomer'); }
};

const deleteCustomer = async (customerId) => {
    try {
        const response = await apiClient.delete(`/customers/${customerId}`);
        return response.data;
    } catch (error) { handleApiError(error, 'deleteCustomer'); }
};

const showCustomer = async (customerId) => {
    try {
        const response = await apiClient.get(`/customers/${customerId}`);
        return response.data;
    } catch (error) { handleApiError(error, 'showCustomer'); }
};

const updateCustomer = async (customerId, customerData) => {
    try {
        const response = await apiClient.put(`/customers/${customerId}`, customerData);
        return response.data;
    } catch (error) { handleApiError(error, 'updateCustomer'); }
};

// --- CONTACTS ---
const listContacts = async (customerId) => {
    try {
        const response = await apiClient.get(`/customers/${customerId}/contacts`);
        return response.data;
    } catch (error) { handleApiError(error, 'listContacts'); }
};

const createContact = async (customerId, contactData) => {
    try {
        const response = await apiClient.post(`/customers/${customerId}/contacts`, contactData);
        return response.data;
    } catch (error) { handleApiError(error, 'createContact'); }
};

// --- DOMAINS ---
const listDomains = async (params = {}) => {
    try {
        const response = await apiClient.get('/domains', { params });
        return response.data;
    } catch (error) { handleApiError(error, 'listDomains'); }
};

const registerDomain = async (domainData) => {
    try {
        const response = await apiClient.post('/domains', domainData);
        return response.data;
    } catch (error) { handleApiError(error, 'registerDomain'); }
};

const checkDomainAvailability = async (domain, include_premium_domains = false) => {
    try {
        const response = await apiClient.get('/domains/availability', { params: { domain, include_premium_domains } });
        return response.data;
    } catch (error) { handleApiError(error, 'checkDomainAvailability'); }
};

const getDomainDetailsByName = async (domain_name) => {
    try {
        const response = await apiClient.get('/domains/details', { params: { domain_name } });
        return response.data;
    } catch (error) { handleApiError(error, 'getDomainDetailsByName'); }
};

const transferDomain = async (transferData) => {
    try {
        const response = await apiClient.post('/domains/transfer', transferData);
        return response.data;
    } catch (error) { handleApiError(error, 'transferDomain'); }
};

const getWhoisInfo = async (domain) => {
    try {
        const response = await apiClient.get('/domains/whois', { params: { domain } });
        return response.data;
    } catch (error) { handleApiError(error, 'getWhoisInfo'); }
};

const showDomainById = async (domainId) => {
    try {
        const response = await apiClient.get(`/domains/${domainId}`);
        return response.data;
    } catch (error) { handleApiError(error, 'showDomainById'); }
};

const getDomainAuthCode = async (domainId) => {
    try {
        const response = await apiClient.get(`/domains/${domainId}/auth_code`);
        return response.data;
    } catch (error) { handleApiError(error, 'getDomainAuthCode'); }
};

const resetDomainAuthCode = async (domainId, auth_code) => {
    try {
        const response = await apiClient.put(`/domains/${domainId}/auth_code`, { auth_code });
        return response.data;
    } catch (error) { handleApiError(error, 'resetDomainAuthCode'); }
};

const updateDomainContacts = async (domainId, contactIds) => {
    try {
        const response = await apiClient.put(`/domains/${domainId}/contacts`, contactIds);
        return response.data;
    } catch (error) { handleApiError(error, 'updateDomainContacts'); }
};

const updateNameservers = async (domainId, nameserversData) => {
    try {
        const response = await apiClient.put(`/domains/${domainId}/ns`, nameserversData);
        return response.data;
    } catch (error) { handleApiError(error, 'updateNameservers'); }
};

const lockDomain = async (domainId, reason = '') => {
    try {
        const response = await apiClient.put(`/domains/${domainId}/locked`, { reason });
        return response.data;
    } catch (error) { handleApiError(error, 'lockDomain'); }
};

const unlockDomain = async (domainId) => {
    try {
        const response = await apiClient.delete(`/domains/${domainId}/locked`);
        return response.data;
    } catch (error) { handleApiError(error, 'unlockDomain'); }
};

const suspendDomain = async (domainId, reason, type = 2) => {
    try {
        const response = await apiClient.put(`/domains/${domainId}/suspended`, { type, reason });
        return response.data;
    } catch (error) { handleApiError(error, 'suspendDomain'); }
};

const unsuspendDomain = async (domainId) => {
    try {
        const response = await apiClient.delete(`/domains/${domainId}/suspended`);
        return response.data;
    } catch (error) { handleApiError(error, 'unsuspendDomain'); }
};

const renewDomain = async (domainId, renewData) => {
    try {
        const response = await apiClient.post(`/domains/${domainId}/renew`, renewData);
        return response.data;
    } catch (error) { handleApiError(error, 'renewDomain'); }
};

const restoreDomain = async (domainId) => {
    try {
        const response = await apiClient.post(`/domains/${domainId}/restore`);
        return response.data;
    } catch (error) { handleApiError(error, 'restoreDomain'); }
};

const resendVerificationEmail = async (domainId) => {
    try {
        const response = await apiClient.post(`/domains/${domainId}/verification/resend`);
        return response.data;
    } catch (error) { handleApiError(error, 'resendVerificationEmail'); }
};

// --- DNS MANAGEMENT ---
const getDnsRecords = async (domainId) => {
    try {
        const response = await apiClient.get(`/domains/${domainId}/dns`);
        return response.data;
    } catch (error) { handleApiError(error, 'getDnsRecords'); }
};

const createDnsRecord = async (domainId, recordData) => {
    try {
        const response = await apiClient.put(`/domains/${domainId}/dns`, recordData);
        return response.data;
    } catch (error) { handleApiError(error, 'createDnsRecord'); }
};

const deleteDnsRecord = async (domainId, recordData) => {
    try {
        const response = await apiClient.delete(`/domains/${domainId}/dns/record`, { data: recordData });
        return response.data;
    } catch (error) { handleApiError(error, 'deleteDnsRecord'); }
};

module.exports = {
    listCustomers, createCustomer, deleteCustomer, showCustomer, updateCustomer,
    listContacts, createContact,
    listDomains, registerDomain, checkDomainAvailability, getDomainDetailsByName,
    transferDomain, getWhoisInfo, showDomainById, getDomainAuthCode, resetDomainAuthCode,
    updateDomainContacts, updateNameservers, lockDomain, unlockDomain,
    suspendDomain, unsuspendDomain, renewDomain, restoreDomain, resendVerificationEmail,
    getDnsRecords, createDnsRecord, deleteDnsRecord
};